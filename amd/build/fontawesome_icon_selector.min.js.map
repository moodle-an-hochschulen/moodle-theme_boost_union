{"version":3,"file":"fontawesome_icon_selector.min.js","sources":["../src/fontawesome_icon_selector.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides the required functionality for an autocomplete element to select a FontAwesome icon.\n *\n * @module     theme_boost_union/fontawesome_icon_selector\n * @copyright  2025 Alexander Bias, ssystems GmbH <abias@ssystems.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport {render as renderTemplate} from 'core/templates';\nimport {getString, getStrings} from 'core/str';\n\n/**\n * Load the list of FontAwesome icons matching the query and render the selector labels for them.\n *\n * @param {String} selector The selector of the auto complete element.\n * @param {String} query The query string.\n * @param {Function} callback A callback function receiving an array of results.\n * @param {Function} failure A function to call in case of failure, receiving the error message.\n */\nexport async function transport(selector, query, callback, failure) {\n\n    const request = {\n        methodname: 'theme_boost_union_get_fontawesome_icons',\n        args: {\n            query: query\n        }\n    };\n\n    try {\n        const response = await Ajax.call([request])[0];\n\n        if (response.overflow) {\n            const msg = await getString('smartmenusmenuitemicon_ajaxtoomanyicons', 'theme_boost_union', '>' + response.maxicons);\n            callback(msg);\n\n        } else {\n            // First, get all the strings we need using getStrings.\n            const sourceStrings = await getStrings([\n                {key: 'smartmenusmenuitemicon_sourcecore', component: 'theme_boost_union'},\n                {key: 'smartmenusmenuitemicon_sourcefasolid', component: 'theme_boost_union'},\n                {key: 'smartmenusmenuitemicon_sourcefabrand', component: 'theme_boost_union'},\n                {key: 'smartmenusmenuitemicon_sourcefablank', component: 'theme_boost_union'}\n            ]);\n\n            // Then, format the icons based on their source.\n            const formattedIcons = response.icons.map(icon => {\n                // Format icon data based on source.\n                let formattedIcon = {\n                    value: icon.name\n                };\n\n                // If this is a Moodle core icon.\n                if (icon.source === 'core') {\n                    formattedIcon.name = icon.name;\n                    formattedIcon.class = icon.class;\n                    formattedIcon.source = sourceStrings[0];\n                    formattedIcon.sourcecolor = 'bg-warning text-dark';\n\n                    // Otherwise, if this is a FontAwesome solid icon.\n                } else if (icon.source === 'fasolid') {\n                    formattedIcon.name = icon.class;\n                    formattedIcon.class = 'fas ' + icon.class;\n                    formattedIcon.source = sourceStrings[1];\n                    formattedIcon.sourcecolor = 'bg-success';\n\n                    // Otherwise, if this is a FontAwesome brands icon.\n                } else if (icon.source === 'fabrand') {\n                    formattedIcon.name = icon.class;\n                    formattedIcon.class = 'fab ' + icon.class;\n                    formattedIcon.source = sourceStrings[2];\n                    formattedIcon.sourcecolor = 'bg-success';\n\n                    // Otherwise, if this is the FontAwesome blank icon.\n                } else if (icon.source === 'fablank') {\n                    formattedIcon.name = icon.class;\n                    formattedIcon.class = 'fa ' + icon.class;\n                    formattedIcon.source = sourceStrings[3];\n                    formattedIcon.sourcecolor = 'bg-success';\n                }\n                // All other icon sources (which should not appear) will be ignored for now.\n\n                return formattedIcon;\n            });\n\n            // Render all icons with the Mustache template.\n            let labels = await Promise.all(\n                formattedIcons.map(formattedIcon =>\n                    renderTemplate('theme_boost_union/form_autocomplete_fontawesome_icon', formattedIcon)\n                )\n            );\n\n            // Add the rendered HTML labels to the icons.\n            formattedIcons.forEach((icon, index) => {\n                icon.label = labels[index];\n            });\n\n            callback(formattedIcons);\n        }\n\n    } catch (e) {\n        failure(e);\n    }\n}\n\n/**\n * Process the results for auto complete elements.\n *\n * @param {String} selector The selector of the auto complete element.\n * @param {Array} results An array or results returned by {@see transport()}.\n * @return {Array} New array of the selector options.\n */\nexport function processResults(selector, results) {\n\n    if (!Array.isArray(results)) {\n        return results;\n\n    } else {\n        return results.map(result => ({value: result.value, label: result.label}));\n    }\n}\n"],"names":["selector","results","Array","isArray","map","result","value","label","query","callback","failure","request","methodname","args","response","Ajax","call","overflow","msg","maxicons","sourceStrings","key","component","formattedIcons","icons","icon","formattedIcon","name","source","class","sourcecolor","labels","Promise","all","forEach","index","e"],"mappings":";;;;;;;8FA+H+BA,SAAUC,gBAEhCC,MAAMC,QAAQF,SAIRA,QAAQG,KAAIC,UAAYC,MAAOD,OAAOC,MAAOC,MAAOF,OAAOE,UAH3DN,2CA/FiBD,SAAUQ,MAAOC,SAAUC,eAEjDC,QAAU,CACZC,WAAY,0CACZC,KAAM,CACFL,MAAOA,kBAKLM,eAAiBC,cAAKC,KAAK,CAACL,UAAU,MAExCG,SAASG,SAAU,OACbC,UAAY,kBAAU,0CAA2C,oBAAqB,IAAMJ,SAASK,UAC3GV,SAASS,SAEN,OAEGE,oBAAsB,mBAAW,CACnC,CAACC,IAAK,oCAAqCC,UAAW,qBACtD,CAACD,IAAK,uCAAwCC,UAAW,qBACzD,CAACD,IAAK,uCAAwCC,UAAW,qBACzD,CAACD,IAAK,uCAAwCC,UAAW,uBAIvDC,eAAiBT,SAASU,MAAMpB,KAAIqB,WAElCC,cAAgB,CAChBpB,MAAOmB,KAAKE,YAII,SAAhBF,KAAKG,QACLF,cAAcC,KAAOF,KAAKE,KAC1BD,cAAcG,MAAQJ,KAAKI,MAC3BH,cAAcE,OAASR,cAAc,GACrCM,cAAcI,YAAc,wBAGL,YAAhBL,KAAKG,QACZF,cAAcC,KAAOF,KAAKI,MAC1BH,cAAcG,MAAQ,OAASJ,KAAKI,MACpCH,cAAcE,OAASR,cAAc,GACrCM,cAAcI,YAAc,cAGL,YAAhBL,KAAKG,QACZF,cAAcC,KAAOF,KAAKI,MAC1BH,cAAcG,MAAQ,OAASJ,KAAKI,MACpCH,cAAcE,OAASR,cAAc,GACrCM,cAAcI,YAAc,cAGL,YAAhBL,KAAKG,SACZF,cAAcC,KAAOF,KAAKI,MAC1BH,cAAcG,MAAQ,MAAQJ,KAAKI,MACnCH,cAAcE,OAASR,cAAc,GACrCM,cAAcI,YAAc,cAIzBJ,qBAIPK,aAAeC,QAAQC,IACvBV,eAAenB,KAAIsB,gBACf,qBAAe,uDAAwDA,kBAK/EH,eAAeW,SAAQ,CAACT,KAAMU,SAC1BV,KAAKlB,MAAQwB,OAAOI,UAGxB1B,SAASc,iBAGf,MAAOa,GACL1B,QAAQ0B"}