{"version":3,"file":"smartmenu_item_edit_form.min.js","sources":["../src/smartmenu_item_edit_form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Theme Boost Union - JavaScript for Smart menu item edit form enhancements\n *\n * @module     theme_boost_union/smartmenu_item_edit_form\n * @copyright  2025 Alexander Bias, ssystems GmbH <abias@ssystems.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([], function() {\n    /**\n     * Initialize the smart menu form enhancements\n     *\n     * @param {Object} config - Configuration object.\n     * @return {Object} - Public methods for the module.\n     */\n    var init = function(config) {\n        // Get the type select element.\n        var typeSelect = document.getElementById('id_type');\n\n        // Function to toggle header visibility.\n        var toggleHeaderVisibility = function() {\n            var selectedType = parseInt(typeSelect.value);\n\n            // Loop through each header configuration.\n            config.headerVisibility.forEach(function(headerConfig) {\n                var headerContainer = document.getElementById('id_' + headerConfig.headerId);\n                if (!headerContainer) {\n                    return; // Skip if header element not found.\n                }\n\n                // Initialize the visibility state.\n                var shouldHide = false;\n\n                // Check if the current selected type should hide this header.\n                headerConfig.hideForTypes.forEach(function(typeValue) {\n                    if (selectedType === parseInt(typeValue)) {\n                        // Hide this header for the current type.\n                        shouldHide = true;\n                    }\n                });\n\n                // Toggle the header visibility.\n                if (shouldHide) {\n                    headerContainer.style.display = 'none';\n                } else {\n                    headerContainer.style.display = '';\n                }\n            });\n        };\n\n        // Run once on page load.\n        toggleHeaderVisibility();\n\n        // Add change event listener to the type select.\n        if (typeSelect) {\n            typeSelect.addEventListener('change', toggleHeaderVisibility);\n        }\n\n        return {\n            toggleHeaderVisibility: toggleHeaderVisibility\n        };\n    };\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","init","config","typeSelect","document","getElementById","toggleHeaderVisibility","selectedType","parseInt","value","headerVisibility","forEach","headerConfig","headerContainer","headerId","shouldHide","hideForTypes","typeValue","style","display","addEventListener"],"mappings":";;;;;;;AAuBAA,oDAAO,IAAI,iBAuDA,CACHC,KAjDO,SAASC,YAEZC,WAAaC,SAASC,eAAe,WAGrCC,uBAAyB,eACrBC,aAAeC,SAASL,WAAWM,OAGvCP,OAAOQ,iBAAiBC,SAAQ,SAASC,kBACjCC,gBAAkBT,SAASC,eAAe,MAAQO,aAAaE,aAC9DD,qBAKDE,YAAa,EAGjBH,aAAaI,aAAaL,SAAQ,SAASM,WACnCV,eAAiBC,SAASS,aAE1BF,YAAa,MAMjBF,gBAAgBK,MAAMC,QADtBJ,WACgC,OAEA,eAM5CT,yBAGIH,YACAA,WAAWiB,iBAAiB,SAAUd,wBAGnC,CACHA,uBAAwBA"}