{"version":3,"file":"submenu.min.js","sources":["../src/submenu.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Theme Boost Union - JS code to initialize and handle events of the sub menus in smart menu.\r\n *\r\n * This AMD module is copied and modified from lib/amd/src/usermenu.js.\r\n *\r\n * @module     theme_boost_union/submenu\r\n * @copyright  2024 bdecent GmbH <https://bdecent.de>\r\n * @copyright  based on code from core/usermenu by Mihail Geshoski\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport {space, enter} from 'core/key_codes';\r\n\r\n/**\r\n * Smartmenu submenu constants.\r\n */\r\nconst Selectors = {\r\n    smartMenuCarousel: '[data-toggle=\"smartmenu-carousel\"]',\r\n    smartMenuCarouselClass: '.theme-boost-union-smartmenu-carousel',\r\n    smartMenuCarouselItem: '[data-toggle=\"smartmenu-carousel\"] .carousel-item',\r\n    smartMenuCarouselItemActive: '[data-toggle=\"smartmenu-carousel\"] .carousel-item.active',\r\n    smartMenuCarouselNavigationLink: '[data-toggle=\"smartmenu-carousel\"] .carousel-navigation-link',\r\n    smartMenuDropDownItems: 'ul.dropdown-menu li.nav-item',\r\n    dropDownMenu: '.dropdown-menu',\r\n    roleMenu: '[role=\"menu\"]',\r\n    attr: {\r\n        smartMenuCarouselTargetAttr: 'data-carousel-target-id',\r\n        smartMenuCarouselNavigationClass: 'carousel-navigation-link',\r\n    },\r\n    region: {\r\n        dropDown: '[data-region=\"moredropdown\"]'\r\n    }\r\n};\r\n\r\n/**\r\n * Register event listeners.\r\n *\r\n * @param {HTMLElement} smartMenu\r\n */\r\nconst registerEventListeners = (smartMenu) => {\r\n\r\n    // Handle click events in the smart menu.\r\n    smartMenu.addEventListener('click', (e) => {\r\n\r\n        // Handle click event on the carousel navigation (control) links in the smart menu.\r\n        if (e.target.matches(Selectors.smartMenuCarouselNavigationLink)) {\r\n            carouselManagement(e);\r\n        }\r\n\r\n    }, true);\r\n\r\n    smartMenu.addEventListener('keydown', e => {\r\n        // Handle keydown event on the carousel navigation (control) links in the smart menu.\r\n        if ((e.keyCode === space ||\r\n            e.keyCode === enter) &&\r\n            e.target.matches(Selectors.smartMenuCarouselNavigationLink)) {\r\n            e.preventDefault();\r\n            carouselManagement(e);\r\n        }\r\n    }, true);\r\n\r\n    /**\r\n     * We do the same actions here even if the caller was a click or button press.\r\n     *\r\n     * @param {Event} e The triggering element and key presses etc.\r\n     */\r\n    const carouselManagement = e => {\r\n\r\n        // By default the smart menu dropdown element closes on a click event. This behaviour is not desirable\r\n        // as we need to be able to navigate through the carousel items (submenus of the smart menu) within the\r\n        // smart menu. Therefore, we need to prevent the propagation of this event and then manually call the\r\n        // carousel transition.\r\n        e.stopPropagation();\r\n        // The id of the targeted carousel item.\r\n        const targetedCarouselItemId = e.target.dataset.carouselTargetId;\r\n        const targetedCarouselItem = smartMenu.querySelector('#' + targetedCarouselItemId);\r\n        // Get the position (index) of the targeted carousel item within the parent container element.\r\n        const index = Array.from(targetedCarouselItem.parentNode.children).indexOf(targetedCarouselItem);\r\n        // Navigate to the targeted carousel item.\r\n        $(smartMenu.querySelector(Selectors.smartMenuCarousel)).carousel(index);\r\n    };\r\n\r\n    // Handle the 'hide.bs.dropdown' event (Fired when the dropdown menu is being closed).\r\n    $(Selectors.smartMenu).on('hide.bs.dropdown', () => {\r\n        // Reset the state once the smart menu dropdown is closed and return back to the first (main) carousel item\r\n        // if necessary.\r\n        $(smartMenu.querySelector(Selectors.smartMenuCarousel)).carousel(0);\r\n    });\r\n\r\n    // Handle the 'slid.bs.carousel' event (Fired when the carousel has completed its slide transition).\r\n    $(Selectors.smartMenuCarousel).on('slid.bs.carousel', () => {\r\n        const activeCarouselItem = smartMenu.querySelector(Selectors.smartMenuCarouselItemActive);\r\n        // Set the focus on the newly activated carousel item.\r\n        if (activeCarouselItem !== null) {\r\n            activeCarouselItem.focus();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Sets up the visibility and positions of card menus inside the moremenu.\r\n */\r\nconst moreMenuCardItem = () => {\r\n\r\n    window.onresize = () => initMoreMenuCardItem();\r\n\r\n    /**\r\n     * Fetches the primary and menubar navigations moremenu and registers the card menu update.\r\n     */\r\n    const initMoreMenuCardItem = () => {\r\n        // Get the primary navigation more menu and initialize card menu update.\r\n        var primaryNav = document.querySelector('.primary-navigation ul.more-nav .dropdownmoremenu');\r\n        if (primaryNav !== null) {\r\n            registerMoreMenuCardItem(primaryNav);\r\n        }\r\n\r\n        // Get the menubar more menu and initialize card menu update.\r\n        var menuBar = document.querySelector('nav.menubar ul.more-nav .dropdownmoremenu');\r\n        if (menuBar !== null) {\r\n            registerMoreMenuCardItem(menuBar);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Registers the click event on the moremenu to update the menus width and position\r\n     * and the visibility of card menus inside the more menu.\r\n     *\r\n     * @param {HTMLElement} moreMenu The more menu element.\r\n     * @returns {void}\r\n     */\r\n    const registerMoreMenuCardItem = (moreMenu) => {\r\n\r\n        // Fetch the list of moved menu items from ul.dropdown-menu li.nav-items.\r\n        var items = moreMenu.querySelectorAll(Selectors.smartMenuDropDownItems);\r\n\r\n        if (items.length <= 0) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown menu of the more menu to prevent faulty clicks on elements moved outside\r\n        // of the more menu during resizing.\r\n        var subMenuDropDownMenu = moreMenu.querySelectorAll(Selectors.dropDownMenu + ' ' + Selectors.dropDownMenu);\r\n        if (subMenuDropDownMenu !== null) {\r\n            Array.from(subMenuDropDownMenu).forEach((e) => e.classList.remove('show'));\r\n        }\r\n\r\n        // Hide the opened card menus when the carousel item is clicked.\r\n        moreMenu.removeEventListener('click', hideCardMenus, true);\r\n        moreMenu.addEventListener('click', hideCardMenus, true);\r\n\r\n        // Remove the width of card menus moved to outside from more menu.\r\n        if (moreMenu.parentNode.querySelectorAll('.dropdown.card-dropdown')) {\r\n            moreMenu.parentNode.querySelectorAll('.dropdown.card-dropdown').forEach((e) => {\r\n                var cardDropDown = e.querySelector(Selectors.dropDownMenu);\r\n                if (cardDropDown !== null) {\r\n                    cardDropDown.style.removeProperty('width');\r\n                    cardDropDown.style.removeProperty('left');\r\n                    cardDropDown.style.removeProperty('right');\r\n                }\r\n            });\r\n        }\r\n        // Parent moremenu.\r\n        var parentMenu = moreMenu.parentNode;\r\n        // Hide all opened card menus on dropdown shown.\r\n        $(parentMenu).on('shown.bs.dropdown', hideOpenMenus);\r\n        $(parentMenu).on('hidden.bs.dropdown', hideOpenMenus);\r\n    };\r\n\r\n    /**\r\n     * Hide all the opened card menus on dropdown shown.\r\n     * @param { Event } e The click event.\r\n     */\r\n    const hideOpenMenus = (e) => {\r\n        if (e.target.matches('.dropdownmoremenu')) {\r\n            var subMenuDropDownMenu = e.currentTarget.querySelectorAll(Selectors.dropDownMenu + ' ' + Selectors.dropDownMenu);\r\n            if (subMenuDropDownMenu !== null) {\r\n                Array.from(subMenuDropDownMenu).forEach((e) => e.classList.remove('show'));\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Hides the opened card menus when a carousel item is clicked. Update the current active card menus position and width.\r\n     *\r\n     * @param { Event } e The click event.\r\n     * @returns { void}\r\n     */\r\n    const hideCardMenus = e => {\r\n        var moreMenu = e.target.closest(Selectors.region.dropDown);\r\n        if (moreMenu && moreMenu.querySelectorAll(Selectors.dropDownMenu)) {\r\n            moreMenu.querySelectorAll(Selectors.dropDownMenu).forEach((dropdownmenu) => {\r\n\r\n                // Hide the nav items other than this target and the carousel navigation links.\r\n                if (!e.target.isEqualNode(dropdownmenu.previousElementSibling)\r\n                    && !e.target.matches(Selectors.smartMenuCarouselNavigationLink)\r\n                    && e.target.matches('.dropdown-toggle.dropdown-item')) {\r\n                    dropdownmenu.classList.remove('show');\r\n                }\r\n                // If the target is a card dropdown link, then update the width of this card dropdown.\r\n                if (e.target.isEqualNode(dropdownmenu.previousElementSibling)\r\n                    && e.target.parentNode.matches('.dropdown.card-dropdown')) {\r\n                    updatePosition(e);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update the position and width of the card menus inside the moremenu.\r\n     *\r\n     * @param {event} e\r\n     */\r\n    const updatePosition = e => {\r\n\r\n        const innerMenu = e.target.parentNode.querySelector(Selectors.roleMenu);\r\n\r\n        if (innerMenu) {\r\n            // Calculate and adjust the position of the card menu based on the dropdown menu's position.\r\n            var dropDown = innerMenu.parentNode.closest(Selectors.dropDownMenu);\r\n            var rect = dropDown.getBoundingClientRect();\r\n            var right = document.scrollingElement.clientWidth - rect.right;\r\n\r\n            // Use the left section of the moremenu dropdown.\r\n            if (rect.left >= right) {\r\n                innerMenu.style.width = rect.left + 'px';\r\n                innerMenu.style.left = 0;\r\n            } else {\r\n                // Use the right side of the moremenu dropdown.\r\n                innerMenu.style.width = right + 'px';\r\n                innerMenu.style.left = 'inherit';\r\n                innerMenu.style.right = 0;\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Initialize the sub menus.\r\n */\r\nconst init = () => {\r\n\r\n    const smartMenus = document.querySelectorAll(Selectors.smartMenuCarouselClass);\r\n\r\n    // Registers event listeners to enable the submenu items carousel.\r\n    if (smartMenus !== undefined && smartMenus.length !== null) {\r\n        smartMenus.forEach((e) => registerEventListeners(e));\r\n    }\r\n\r\n    // Calculate and setup the card menus width and positions inside the more menu.\r\n    moreMenuCardItem();\r\n};\r\n\r\nexport default {\r\n    init: init,\r\n};\r\n"],"names":["Selectors","smartMenuCarousel","smartMenuCarouselClass","smartMenuCarouselItem","smartMenuCarouselItemActive","smartMenuCarouselNavigationLink","smartMenuDropDownItems","dropDownMenu","roleMenu","attr","smartMenuCarouselTargetAttr","smartMenuCarouselNavigationClass","region","dropDown","init","smartMenus","document","querySelectorAll","undefined","length","forEach","e","smartMenu","addEventListener","target","matches","carouselManagement","keyCode","space","enter","preventDefault","stopPropagation","targetedCarouselItemId","dataset","carouselTargetId","targetedCarouselItem","querySelector","index","Array","from","parentNode","children","indexOf","carousel","on","activeCarouselItem","focus","registerEventListeners","window","onresize","initMoreMenuCardItem","primaryNav","registerMoreMenuCardItem","menuBar","moreMenu","subMenuDropDownMenu","classList","remove","removeEventListener","hideCardMenus","cardDropDown","style","removeProperty","parentMenu","hideOpenMenus","currentTarget","closest","dropdownmenu","isEqualNode","previousElementSibling","updatePosition","innerMenu","rect","getBoundingClientRect","right","scrollingElement","clientWidth","left","width","moreMenuCardItem"],"mappings":"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"}