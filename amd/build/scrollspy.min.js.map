{"version":3,"file":"scrollspy.min.js","sources":["../src/scrollspy.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Theme Boost Union - JS code back to top button\n *\n * @module     theme_boost_union/scrollspy\n * @copyright  2022 Josha Bartsch <bartsch@itc.rwth-aachen.de>\n * @copyright  based on code from theme_fordson by Chris Kenniburg.\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Runs once at initial load, and once at editmode-switch toggle.\n * Incase of initial load, checks sessionStorage whether a position was set and jumps to the appropriate position.\n *\n * Incase of a click on the switch, iterates over central elements (selector .section.main), determines element\n * with minimal distance between pixel-toprow of view and pixel-toprow of the element.\n * Writes element ID + distance of view from element into session storage.\n *\n * Saving a reference point + relative distance grants leeway for varying page elements.\n * (See original implementation: https://raw.githubusercontent.com/dbnschools/moodle-theme_fordson/master/javascript/scrollspy.js)\n */\nconst initScrollSpy = () => {\n    // Unfortunately the editmode-switch carries no unique ID\n    let editToggle = document.querySelector('form.editmode-switch-form');\n\n    editToggle.addEventListener('click', () => {\n\n        window.sessionStorage.setItem('edit_toggled', true);\n\n        let viewport_top = document.getElementById('page').scrollTop;\n        let closest = null;\n        let closest_offset = null;\n\n        document.querySelectorAll('.section.main').forEach((node) => {\n            let this_offset = node.offsetTop;\n\n            if (closest && closest.offsetTop) {\n                closest_offset = closest.offsetTop;\n            }\n            if (closest === null || Math.abs(this_offset - viewport_top) < Math.abs(closest_offset - viewport_top)) {\n                closest = node;\n            }\n        });\n\n        window.sessionStorage.setItem('closest_id', closest.id);\n        window.sessionStorage.setItem('closest_delta', viewport_top - closest.offsetTop);\n    });\n\n    let edit_toggled = window.sessionStorage.getItem('edit_toggled');\n\n    if (edit_toggled) {\n\n        let closest_id = window.sessionStorage.getItem('closest_id');\n        let closest_delta = window.sessionStorage.getItem('closest_delta');\n\n        if (closest_id && closest_delta) {\n            let closest = document.getElementById(closest_id);\n            let y = closest.offsetTop + parseInt(closest_delta);\n\n            document.getElementById('page').scrollTo(0, y);\n        }\n\n        window.sessionStorage.removeItem('edit_toggled');\n        window.sessionStorage.removeItem('closest_id');\n        window.sessionStorage.removeItem('closest_delta');\n    }\n};\n\n/**\n * Ensures the passed function will be called after the DOM is ready/loaded:\n * Incase DOM is fully loaded when JS is called, call within next tick.\n * Otherwise sets an eventlistener for DOMEventLoaded\n *\n * @param {*} callback\n */\nconst docReady = (callback) => {\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        setTimeout(callback, 1);\n    } else {\n        document.addEventListener('DOMContentLoaded', callback);\n    }\n};\n\nexport const init = () => {\n    docReady(initScrollSpy());\n};\n"],"names":["callback","document","querySelector","addEventListener","window","sessionStorage","setItem","viewport_top","getElementById","scrollTop","closest","closest_offset","querySelectorAll","forEach","node","this_offset","offsetTop","Math","abs","id","getItem","closest_id","closest_delta","y","parseInt","scrollTo","removeItem","initScrollSpy","readyState","setTimeout"],"mappings":"gKAiGoB,KARFA,IAAAA,SAAAA,SAtDI,SAEDC,SAASC,cAAc,6BAE7BC,iBAAiB,SAAS,KAEjCC,OAAOC,eAAeC,QAAQ,gBAAgB,OAE1CC,aAAeN,SAASO,eAAe,QAAQC,UAC/CC,QAAU,KACVC,eAAiB,KAErBV,SAASW,iBAAiB,iBAAiBC,SAASC,WAC5CC,YAAcD,KAAKE,UAEnBN,SAAWA,QAAQM,YACnBL,eAAiBD,QAAQM,YAEb,OAAZN,SAAoBO,KAAKC,IAAIH,YAAcR,cAAgBU,KAAKC,IAAIP,eAAiBJ,iBACrFG,QAAUI,SAIlBV,OAAOC,eAAeC,QAAQ,aAAcI,QAAQS,IACpDf,OAAOC,eAAeC,QAAQ,gBAAiBC,aAAeG,QAAQM,cAGvDZ,OAAOC,eAAee,QAAQ,gBAE/B,KAEVC,WAAajB,OAAOC,eAAee,QAAQ,cAC3CE,cAAgBlB,OAAOC,eAAee,QAAQ,oBAE9CC,YAAcC,cAAe,KAEzBC,EADUtB,SAASO,eAAea,YACtBL,UAAYQ,SAASF,eAErCrB,SAASO,eAAe,QAAQiB,SAAS,EAAGF,GAGhDnB,OAAOC,eAAeqB,WAAW,gBACjCtB,OAAOC,eAAeqB,WAAW,cACjCtB,OAAOC,eAAeqB,WAAW,mBAoB5BC,GARmB,aAAxB1B,SAAS2B,YAAqD,gBAAxB3B,SAAS2B,WAC/CC,WAAW7B,SAAU,GAErBC,SAASE,iBAAiB,mBAAoBH"}